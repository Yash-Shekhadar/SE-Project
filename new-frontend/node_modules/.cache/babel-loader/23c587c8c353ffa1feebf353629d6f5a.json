{"ast":null,"code":"'use strict';\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar $ = require('../internals/export');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar call = require('../internals/function-call');\n\nvar aCallable = require('../internals/a-callable');\n\nvar anObject = require('../internals/an-object');\n\nvar bind = require('../internals/function-bind-context');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar getSetIterator = require('../internals/get-set-iterator');\n\nvar iterate = require('../internals/iterate'); // `Set.prototype.filter` method\n// https://github.com/tc39/proposal-collection-methods\n\n\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  filter: function filter(callbackfn\n  /* , thisArg */\n  ) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\n    var adder = aCallable(newSet.add);\n    iterate(iterator, function (value) {\n      if (boundFunction(value, value, set)) call(adder, newSet, value);\n    }, {\n      IS_ITERATOR: true\n    });\n    return newSet;\n  }\n});","map":{"version":3,"sources":["D:/University of Florida/Spring 22/Software Engineering/project/SE-Project/new-frontend/node_modules/core-js/modules/esnext.set.filter.js"],"names":["IS_PURE","require","$","getBuiltIn","call","aCallable","anObject","bind","speciesConstructor","getSetIterator","iterate","target","proto","real","forced","filter","callbackfn","set","iterator","boundFunction","arguments","length","undefined","newSet","adder","add","value","IS_ITERATOR"],"mappings":"AAAA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAIO,kBAAkB,GAAGP,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIQ,cAAc,GAAGR,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAIS,OAAO,GAAGT,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAC,CAAC,CAAC;AAAES,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEd;AAAlD,CAAD,EAA8D;AAC7De,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBC;AAAW;AAA3B,IAA4C;AAClD,QAAIC,GAAG,GAAGX,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIY,QAAQ,GAAGT,cAAc,CAACQ,GAAD,CAA7B;AACA,QAAIE,aAAa,GAAGZ,IAAI,CAACS,UAAD,EAAaI,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD,CAAxB;AACA,QAAIC,MAAM,GAAG,KAAKf,kBAAkB,CAACS,GAAD,EAAMd,UAAU,CAAC,KAAD,CAAhB,CAAvB,GAAb;AACA,QAAIqB,KAAK,GAAGnB,SAAS,CAACkB,MAAM,CAACE,GAAR,CAArB;AACAf,IAAAA,OAAO,CAACQ,QAAD,EAAW,UAAUQ,KAAV,EAAiB;AACjC,UAAIP,aAAa,CAACO,KAAD,EAAQA,KAAR,EAAeT,GAAf,CAAjB,EAAsCb,IAAI,CAACoB,KAAD,EAAQD,MAAR,EAAgBG,KAAhB,CAAJ;AACvC,KAFM,EAEJ;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAFI,CAAP;AAGA,WAAOJ,MAAP;AACD;AAX4D,CAA9D,CAAD","sourcesContent":["'use strict';\r\nvar IS_PURE = require('../internals/is-pure');\r\nvar $ = require('../internals/export');\r\nvar getBuiltIn = require('../internals/get-built-in');\r\nvar call = require('../internals/function-call');\r\nvar aCallable = require('../internals/a-callable');\r\nvar anObject = require('../internals/an-object');\r\nvar bind = require('../internals/function-bind-context');\r\nvar speciesConstructor = require('../internals/species-constructor');\r\nvar getSetIterator = require('../internals/get-set-iterator');\r\nvar iterate = require('../internals/iterate');\r\n\r\n// `Set.prototype.filter` method\r\n// https://github.com/tc39/proposal-collection-methods\r\n$({ target: 'Set', proto: true, real: true, forced: IS_PURE }, {\r\n  filter: function filter(callbackfn /* , thisArg */) {\r\n    var set = anObject(this);\r\n    var iterator = getSetIterator(set);\r\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\r\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\r\n    var adder = aCallable(newSet.add);\r\n    iterate(iterator, function (value) {\r\n      if (boundFunction(value, value, set)) call(adder, newSet, value);\r\n    }, { IS_ITERATOR: true });\r\n    return newSet;\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}