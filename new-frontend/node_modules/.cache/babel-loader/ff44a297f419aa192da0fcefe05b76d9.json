{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar anObject = require('../internals/an-object');\n\nvar bind = require('../internals/function-bind-context');\n\nvar getSetIterator = require('../internals/get-set-iterator');\n\nvar iterate = require('../internals/iterate'); // `Set.prototype.every` method\n// https://github.com/tc39/proposal-collection-methods\n\n\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  every: function every(callbackfn\n  /* , thisArg */\n  ) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    return !iterate(iterator, function (value, stop) {\n      if (!boundFunction(value, value, set)) return stop();\n    }, {\n      IS_ITERATOR: true,\n      INTERRUPTED: true\n    }).stopped;\n  }\n});","map":{"version":3,"sources":["E:/UFL/SE-Project/new-frontend/node_modules/core-js/modules/esnext.set.every.js"],"names":["$","require","IS_PURE","anObject","bind","getSetIterator","iterate","target","proto","real","forced","every","callbackfn","set","iterator","boundFunction","arguments","length","undefined","value","stop","IS_ITERATOR","INTERRUPTED","stopped"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAII,cAAc,GAAGJ,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAD,CAAC,CAAC;AAAEO,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAER;AAAlD,CAAD,EAA8D;AAC7DS,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC;AAAW;AAA1B,IAA2C;AAChD,QAAIC,GAAG,GAAGV,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIW,QAAQ,GAAGT,cAAc,CAACQ,GAAD,CAA7B;AACA,QAAIE,aAAa,GAAGX,IAAI,CAACQ,UAAD,EAAaI,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD,CAAxB;AACA,WAAO,CAACZ,OAAO,CAACQ,QAAD,EAAW,UAAUK,KAAV,EAAiBC,IAAjB,EAAuB;AAC/C,UAAI,CAACL,aAAa,CAACI,KAAD,EAAQA,KAAR,EAAeN,GAAf,CAAlB,EAAuC,OAAOO,IAAI,EAAX;AACxC,KAFc,EAEZ;AAAEC,MAAAA,WAAW,EAAE,IAAf;AAAqBC,MAAAA,WAAW,EAAE;AAAlC,KAFY,CAAP,CAEqCC,OAF7C;AAGD;AAR4D,CAA9D,CAAD","sourcesContent":["'use strict';\r\nvar $ = require('../internals/export');\r\nvar IS_PURE = require('../internals/is-pure');\r\nvar anObject = require('../internals/an-object');\r\nvar bind = require('../internals/function-bind-context');\r\nvar getSetIterator = require('../internals/get-set-iterator');\r\nvar iterate = require('../internals/iterate');\r\n\r\n// `Set.prototype.every` method\r\n// https://github.com/tc39/proposal-collection-methods\r\n$({ target: 'Set', proto: true, real: true, forced: IS_PURE }, {\r\n  every: function every(callbackfn /* , thisArg */) {\r\n    var set = anObject(this);\r\n    var iterator = getSetIterator(set);\r\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\r\n    return !iterate(iterator, function (value, stop) {\r\n      if (!boundFunction(value, value, set)) return stop();\r\n    }, { IS_ITERATOR: true, INTERRUPTED: true }).stopped;\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}