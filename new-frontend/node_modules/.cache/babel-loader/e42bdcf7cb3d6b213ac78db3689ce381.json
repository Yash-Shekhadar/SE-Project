{"ast":null,"code":"var _jsxFileName = \"/Users/hrishikeshmahajan/UFL/SE/SE-Project/new-frontend/src/components/AppSidebar.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler, CImage } from '@coreui/react';\nimport CIcon from '@coreui/icons-react';\nimport { AppSidebarNav } from './AppSidebarNav';\nimport { logoNegative } from 'src/assets/brand/logo-negative';\nimport { sygnet } from 'src/assets/brand/sygnet';\nimport cover from 'src/assets/brand/cover.png';\nimport defLogo from \"src/assets/brand/default.svg\";\nimport SimpleBar from 'simplebar-react';\nimport 'simplebar/dist/simplebar.min.css'; // sidebar nav config\n\nimport navigation from '../_nav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AppSidebar = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const unfoldable = useSelector(state => state.sidebarUnfoldable);\n  const sidebarShow = useSelector(state => state.sidebarShow);\n  props.type = \"admin\";\n  console.log(props.type);\n\n  if (props.type === \"admin\") {\n    return /*#__PURE__*/_jsxDEV(CSidebar, {\n      position: \"fixed\",\n      unfoldable: unfoldable,\n      visible: sidebarShow,\n      onVisibleChange: visible => {\n        dispatch({\n          type: 'set',\n          sidebarShow: visible\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(CSidebarBrand, {\n        className: \"d-none d-md-flex\",\n        to: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(CImage, {\n          src: \"/cover.png\",\n          width: 225,\n          height: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CIcon, {\n          className: \"sidebar-brand-narrow\",\n          icon: sygnet,\n          height: 35\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CSidebarNav, {\n        children: /*#__PURE__*/_jsxDEV(SimpleBar, {\n          children: /*#__PURE__*/_jsxDEV(AppSidebarNav, {\n            items: navigation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CSidebarToggler, {\n        className: \"d-none d-lg-flex\",\n        onClick: () => dispatch({\n          type: 'set',\n          sidebarUnfoldable: !unfoldable\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  } else if (props.type === \"maintenance\") {} else if (props.type === \"tenant\") {}\n};\n\n_s(AppSidebar, \"KjoCpiMCRF2BfnlV7ZQfw4phdIU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AppSidebar;\nexport default _c2 = /*#__PURE__*/React.memo(AppSidebar);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppSidebar\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/hrishikeshmahajan/UFL/SE/SE-Project/new-frontend/src/components/AppSidebar.js"],"names":["React","useSelector","useDispatch","CSidebar","CSidebarBrand","CSidebarNav","CSidebarToggler","CImage","CIcon","AppSidebarNav","logoNegative","sygnet","cover","SimpleBar","navigation","AppSidebar","props","dispatch","unfoldable","state","sidebarUnfoldable","sidebarShow","type","console","log","visible","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,WAAlC,EAA+CC,eAA/C,EAAgEC,MAAhE,QAA8E,eAA9E;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,MAAT,QAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;;AAGA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAO,kCAAP,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,SAAvB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;AACA,QAAMgB,UAAU,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACC,iBAAlB,CAA9B;AACA,QAAMC,WAAW,GAAGpB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACE,WAAlB,CAA/B;AACAL,EAAAA,KAAK,CAACM,IAAN,GAAa,OAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACM,IAAlB;;AACA,MAAGN,KAAK,CAACM,IAAN,KAAe,OAAlB,EACA;AACE,wBACE,QAAC,QAAD;AACE,MAAA,QAAQ,EAAC,OADX;AAEE,MAAA,UAAU,EAAEJ,UAFd;AAGE,MAAA,OAAO,EAAEG,WAHX;AAIE,MAAA,eAAe,EAAGI,OAAD,IAAa;AAC5BR,QAAAA,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE,KAAR;AAAeD,UAAAA,WAAW,EAAEI;AAA5B,SAAD,CAAR;AACD,OANH;AAAA,8BAQE,QAAC,aAAD;AAAe,QAAA,SAAS,EAAC,kBAAzB;AAA4C,QAAA,EAAE,EAAC,GAA/C;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,GAAG,EAAC,YAAZ;AAAyB,UAAA,KAAK,EAAE,GAAhC;AAAqC,UAAA,MAAM,EAAE;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAO,UAAA,SAAS,EAAC,sBAAjB;AAAwC,UAAA,IAAI,EAAEd,MAA9C;AAAsD,UAAA,MAAM,EAAE;AAA9D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,eAYE,QAAC,WAAD;AAAA,+BACE,QAAC,SAAD;AAAA,iCACE,QAAC,aAAD;AAAe,YAAA,KAAK,EAAEG;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAZF,eAiBE,QAAC,eAAD;AACE,QAAA,SAAS,EAAC,kBADZ;AAEE,QAAA,OAAO,EAAE,MAAMG,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAE,KAAR;AAAeF,UAAAA,iBAAiB,EAAE,CAACF;AAAnC,SAAD;AAFzB;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD,GA1BD,MA2BK,IAAIF,KAAK,CAACM,IAAN,KAAe,aAAnB,EACL,CAEC,CAHI,MAIA,IAAIN,KAAK,CAACM,IAAN,KAAe,QAAnB,EACL,CAEC;AAGF,CA3CD;;GAAMP,U;UACab,W,EACED,W,EACCA,W;;;KAHhBc,U;AA6CN,kCAAef,KAAK,CAAC0B,IAAN,CAAWX,UAAX,CAAf","sourcesContent":["import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { CSidebar, CSidebarBrand, CSidebarNav, CSidebarToggler, CImage } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\n\nimport { AppSidebarNav } from './AppSidebarNav'\n\nimport { logoNegative } from 'src/assets/brand/logo-negative'\nimport { sygnet } from 'src/assets/brand/sygnet'\nimport cover from 'src/assets/brand/cover.png';\nimport defLogo from 'src/assets/brand/default.svg';\n\nimport SimpleBar from 'simplebar-react'\nimport 'simplebar/dist/simplebar.min.css'\n\n// sidebar nav config\nimport navigation from '../_nav'\n\nconst AppSidebar = (props) => {\n  const dispatch = useDispatch()\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable)\n  const sidebarShow = useSelector((state) => state.sidebarShow)\n  props.type = \"admin\"\n  console.log(props.type)\n  if(props.type === \"admin\")\n  {\n    return (\n      <CSidebar\n        position=\"fixed\"\n        unfoldable={unfoldable}\n        visible={sidebarShow}\n        onVisibleChange={(visible) => {\n          dispatch({ type: 'set', sidebarShow: visible })\n        }}\n      >\n        <CSidebarBrand className=\"d-none d-md-flex\" to=\"/\">\n          <CImage src='/cover.png' width={225} height={100}></CImage>\n          <CIcon className=\"sidebar-brand-narrow\" icon={sygnet} height={35} />\n        </CSidebarBrand>\n        <CSidebarNav>\n          <SimpleBar>\n            <AppSidebarNav items={navigation} />\n          </SimpleBar>\n        </CSidebarNav>\n        <CSidebarToggler\n          className=\"d-none d-lg-flex\"\n          onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n        />\n      </CSidebar>\n    )\n  }\n  else if (props.type === \"maintenance\")\n  {\n\n  }\n  else if (props.type === \"tenant\")\n  {\n\n  }\n\n  \n}\n\nexport default React.memo(AppSidebar)\n"]},"metadata":{},"sourceType":"module"}