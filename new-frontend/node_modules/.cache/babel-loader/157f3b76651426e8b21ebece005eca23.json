{"ast":null,"code":"'use strict';\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar $ = require('../internals/export');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar bind = require('../internals/function-bind-context');\n\nvar call = require('../internals/function-call');\n\nvar aCallable = require('../internals/a-callable');\n\nvar anObject = require('../internals/an-object');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar getMapIterator = require('../internals/get-map-iterator');\n\nvar iterate = require('../internals/iterate'); // `Map.prototype.mapKeys` method\n// https://github.com/tc39/proposal-collection-methods\n\n\n$({\n  target: 'Map',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  mapKeys: function mapKeys(callbackfn\n  /* , thisArg */\n  ) {\n    var map = anObject(this);\n    var iterator = getMapIterator(map);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();\n    var setter = aCallable(newMap.set);\n    iterate(iterator, function (key, value) {\n      call(setter, newMap, boundFunction(value, key, map), value);\n    }, {\n      AS_ENTRIES: true,\n      IS_ITERATOR: true\n    });\n    return newMap;\n  }\n});","map":{"version":3,"sources":["E:/UFL/SE-Project/new-frontend/node_modules/core-js/modules/esnext.map.map-keys.js"],"names":["IS_PURE","require","$","getBuiltIn","bind","call","aCallable","anObject","speciesConstructor","getMapIterator","iterate","target","proto","real","forced","mapKeys","callbackfn","map","iterator","boundFunction","arguments","length","undefined","newMap","setter","set","key","value","AS_ENTRIES","IS_ITERATOR"],"mappings":"AAAA;;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIC,CAAC,GAAGD,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,oCAAD,CAAlB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIM,QAAQ,GAAGN,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIO,kBAAkB,GAAGP,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIQ,cAAc,GAAGR,OAAO,CAAC,+BAAD,CAA5B;;AACA,IAAIS,OAAO,GAAGT,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAC,CAAC,CAAC;AAAES,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEd;AAAlD,CAAD,EAA8D;AAC7De,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC;AAAW;AAA5B,IAA6C;AACpD,QAAIC,GAAG,GAAGV,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIW,QAAQ,GAAGT,cAAc,CAACQ,GAAD,CAA7B;AACA,QAAIE,aAAa,GAAGf,IAAI,CAACY,UAAD,EAAaI,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBD,SAAS,CAAC,CAAD,CAAhC,GAAsCE,SAAnD,CAAxB;AACA,QAAIC,MAAM,GAAG,KAAKf,kBAAkB,CAACS,GAAD,EAAMd,UAAU,CAAC,KAAD,CAAhB,CAAvB,GAAb;AACA,QAAIqB,MAAM,GAAGlB,SAAS,CAACiB,MAAM,CAACE,GAAR,CAAtB;AACAf,IAAAA,OAAO,CAACQ,QAAD,EAAW,UAAUQ,GAAV,EAAeC,KAAf,EAAsB;AACtCtB,MAAAA,IAAI,CAACmB,MAAD,EAASD,MAAT,EAAiBJ,aAAa,CAACQ,KAAD,EAAQD,GAAR,EAAaT,GAAb,CAA9B,EAAiDU,KAAjD,CAAJ;AACD,KAFM,EAEJ;AAAEC,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,WAAW,EAAE;AAAjC,KAFI,CAAP;AAGA,WAAON,MAAP;AACD;AAX4D,CAA9D,CAAD","sourcesContent":["'use strict';\r\nvar IS_PURE = require('../internals/is-pure');\r\nvar $ = require('../internals/export');\r\nvar getBuiltIn = require('../internals/get-built-in');\r\nvar bind = require('../internals/function-bind-context');\r\nvar call = require('../internals/function-call');\r\nvar aCallable = require('../internals/a-callable');\r\nvar anObject = require('../internals/an-object');\r\nvar speciesConstructor = require('../internals/species-constructor');\r\nvar getMapIterator = require('../internals/get-map-iterator');\r\nvar iterate = require('../internals/iterate');\r\n\r\n// `Map.prototype.mapKeys` method\r\n// https://github.com/tc39/proposal-collection-methods\r\n$({ target: 'Map', proto: true, real: true, forced: IS_PURE }, {\r\n  mapKeys: function mapKeys(callbackfn /* , thisArg */) {\r\n    var map = anObject(this);\r\n    var iterator = getMapIterator(map);\r\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\r\n    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();\r\n    var setter = aCallable(newMap.set);\r\n    iterate(iterator, function (key, value) {\r\n      call(setter, newMap, boundFunction(value, key, map), value);\r\n    }, { AS_ENTRIES: true, IS_ITERATOR: true });\r\n    return newMap;\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}