{"ast":null,"code":"export const ROOT_ID = '__cy_root';\n/**\n * Remove any style or extra link elements from the iframe placeholder\n * left from any previous test\n *\n */\n\nexport function cleanupStyles() {\n  const styles = document.body.querySelectorAll('[data-cy=injected-style-tag]');\n  styles.forEach(styleElement => {\n    if (styleElement.parentElement) {\n      styleElement.parentElement.removeChild(styleElement);\n    }\n  });\n  const links = document.body.querySelectorAll('[data-cy=injected-stylesheet]');\n  links.forEach(link => {\n    if (link.parentElement) {\n      link.parentElement.removeChild(link);\n    }\n  });\n}\n/**\n * Insert links to external style resources.\n */\n\nfunction insertStylesheets(stylesheets, document, el) {\n  stylesheets.forEach(href => {\n    const link = document.createElement('link');\n    link.type = 'text/css';\n    link.rel = 'stylesheet';\n    link.href = href;\n    link.dataset.cy = 'injected-stylesheet';\n    document.body.insertBefore(link, el);\n  });\n}\n/**\n * Inserts a single stylesheet element\n */\n\n\nfunction insertStyles(styles, document, el) {\n  styles.forEach(style => {\n    const styleElement = document.createElement('style');\n    styleElement.dataset.cy = 'injected-style-tag';\n    styleElement.appendChild(document.createTextNode(style));\n    document.body.insertBefore(styleElement, el);\n  });\n}\n\nfunction insertSingleCssFile(cssFilename, document, el, log) {\n  return cy.readFile(cssFilename, {\n    log\n  }).then(css => {\n    const style = document.createElement('style');\n    style.appendChild(document.createTextNode(css));\n    document.body.insertBefore(style, el);\n  });\n}\n/**\n * Reads the given CSS file from local file system\n * and adds the loaded style text as an element.\n */\n\n\nfunction insertLocalCssFiles(cssFilenames, document, el, log) {\n  return Cypress.Promise.mapSeries(cssFilenames, cssFilename => {\n    return insertSingleCssFile(cssFilename, document, el, log);\n  });\n}\n/**\n * Injects custom style text or CSS file or 3rd party style resources\n * into the given document.\n */\n\n\nexport const injectStylesBeforeElement = (options, document, el) => {\n  if (!el) return; // first insert all stylesheets as Link elements\n\n  let stylesheets = [];\n\n  if (typeof options.stylesheet === 'string') {\n    stylesheets.push(options.stylesheet);\n  } else if (Array.isArray(options.stylesheet)) {\n    stylesheets = stylesheets.concat(options.stylesheet);\n  }\n\n  if (typeof options.stylesheets === 'string') {\n    options.stylesheets = [options.stylesheets];\n  }\n\n  if (options.stylesheets) {\n    stylesheets = stylesheets.concat(options.stylesheets);\n  }\n\n  insertStylesheets(stylesheets, document, el); // insert any styles as <style>...</style> elements\n\n  let styles = [];\n\n  if (typeof options.style === 'string') {\n    styles.push(options.style);\n  } else if (Array.isArray(options.style)) {\n    styles = styles.concat(options.style);\n  }\n\n  if (typeof options.styles === 'string') {\n    styles.push(options.styles);\n  } else if (Array.isArray(options.styles)) {\n    styles = styles.concat(options.styles);\n  }\n\n  insertStyles(styles, document, el); // now load any css files by path and add their content\n  // as <style>...</style> elements\n\n  let cssFiles = [];\n\n  if (typeof options.cssFile === 'string') {\n    cssFiles.push(options.cssFile);\n  } else if (Array.isArray(options.cssFile)) {\n    cssFiles = cssFiles.concat(options.cssFile);\n  }\n\n  if (typeof options.cssFiles === 'string') {\n    cssFiles.push(options.cssFiles);\n  } else if (Array.isArray(options.cssFiles)) {\n    cssFiles = cssFiles.concat(options.cssFiles);\n  }\n\n  return insertLocalCssFiles(cssFiles, document, el, options.log);\n};\nexport function setupHooks(optionalCallback) {\n  // When running component specs, we cannot allow \"cy.visit\"\n  // because it will wipe out our preparation work, and does not make much sense\n  // thus we overwrite \"cy.visit\" to throw an error\n  Cypress.Commands.overwrite('visit', () => {\n    throw new Error('cy.visit from a component spec is not allowed');\n  }); // @ts-ignore\n\n  Cypress.on('test:before:run', () => {\n    optionalCallback === null || optionalCallback === void 0 ? void 0 : optionalCallback();\n    cleanupStyles();\n  });\n}","map":{"version":3,"sources":["D:/University of Florida/Spring 22/Software Engineering/project/SE-Project/new-frontend/node_modules/@cypress/mount-utils/dist/index.js"],"names":["ROOT_ID","cleanupStyles","styles","document","body","querySelectorAll","forEach","styleElement","parentElement","removeChild","links","link","insertStylesheets","stylesheets","el","href","createElement","type","rel","dataset","cy","insertBefore","insertStyles","style","appendChild","createTextNode","insertSingleCssFile","cssFilename","log","readFile","then","css","insertLocalCssFiles","cssFilenames","Cypress","Promise","mapSeries","injectStylesBeforeElement","options","stylesheet","push","Array","isArray","concat","cssFiles","cssFile","setupHooks","optionalCallback","Commands","overwrite","Error","on"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG,WAAhB;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,GAAyB;AAC5B,QAAMC,MAAM,GAAGC,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,8BAA/B,CAAf;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAgBC,YAAD,IAAkB;AAC7B,QAAIA,YAAY,CAACC,aAAjB,EAAgC;AAC5BD,MAAAA,YAAY,CAACC,aAAb,CAA2BC,WAA3B,CAAuCF,YAAvC;AACH;AACJ,GAJD;AAKA,QAAMG,KAAK,GAAGP,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,+BAA/B,CAAd;AACAK,EAAAA,KAAK,CAACJ,OAAN,CAAeK,IAAD,IAAU;AACpB,QAAIA,IAAI,CAACH,aAAT,EAAwB;AACpBG,MAAAA,IAAI,CAACH,aAAL,CAAmBC,WAAnB,CAA+BE,IAA/B;AACH;AACJ,GAJD;AAKH;AACD;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,WAA3B,EAAwCV,QAAxC,EAAkDW,EAAlD,EAAsD;AAClDD,EAAAA,WAAW,CAACP,OAAZ,CAAqBS,IAAD,IAAU;AAC1B,UAAMJ,IAAI,GAAGR,QAAQ,CAACa,aAAT,CAAuB,MAAvB,CAAb;AACAL,IAAAA,IAAI,CAACM,IAAL,GAAY,UAAZ;AACAN,IAAAA,IAAI,CAACO,GAAL,GAAW,YAAX;AACAP,IAAAA,IAAI,CAACI,IAAL,GAAYA,IAAZ;AACAJ,IAAAA,IAAI,CAACQ,OAAL,CAAaC,EAAb,GAAkB,qBAAlB;AACAjB,IAAAA,QAAQ,CAACC,IAAT,CAAciB,YAAd,CAA2BV,IAA3B,EAAiCG,EAAjC;AACH,GAPD;AAQH;AACD;AACA;AACA;;;AACA,SAASQ,YAAT,CAAsBpB,MAAtB,EAA8BC,QAA9B,EAAwCW,EAAxC,EAA4C;AACxCZ,EAAAA,MAAM,CAACI,OAAP,CAAgBiB,KAAD,IAAW;AACtB,UAAMhB,YAAY,GAAGJ,QAAQ,CAACa,aAAT,CAAuB,OAAvB,CAArB;AACAT,IAAAA,YAAY,CAACY,OAAb,CAAqBC,EAArB,GAA0B,oBAA1B;AACAb,IAAAA,YAAY,CAACiB,WAAb,CAAyBrB,QAAQ,CAACsB,cAAT,CAAwBF,KAAxB,CAAzB;AACApB,IAAAA,QAAQ,CAACC,IAAT,CAAciB,YAAd,CAA2Bd,YAA3B,EAAyCO,EAAzC;AACH,GALD;AAMH;;AACD,SAASY,mBAAT,CAA6BC,WAA7B,EAA0CxB,QAA1C,EAAoDW,EAApD,EAAwDc,GAAxD,EAA6D;AACzD,SAAOR,EAAE,CAACS,QAAH,CAAYF,WAAZ,EAAyB;AAAEC,IAAAA;AAAF,GAAzB,EAAkCE,IAAlC,CAAwCC,GAAD,IAAS;AACnD,UAAMR,KAAK,GAAGpB,QAAQ,CAACa,aAAT,CAAuB,OAAvB,CAAd;AACAO,IAAAA,KAAK,CAACC,WAAN,CAAkBrB,QAAQ,CAACsB,cAAT,CAAwBM,GAAxB,CAAlB;AACA5B,IAAAA,QAAQ,CAACC,IAAT,CAAciB,YAAd,CAA2BE,KAA3B,EAAkCT,EAAlC;AACH,GAJM,CAAP;AAKH;AACD;AACA;AACA;AACA;;;AACA,SAASkB,mBAAT,CAA6BC,YAA7B,EAA2C9B,QAA3C,EAAqDW,EAArD,EAAyDc,GAAzD,EAA8D;AAC1D,SAAOM,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAA0BH,YAA1B,EAAyCN,WAAD,IAAiB;AAC5D,WAAOD,mBAAmB,CAACC,WAAD,EAAcxB,QAAd,EAAwBW,EAAxB,EAA4Bc,GAA5B,CAA1B;AACH,GAFM,CAAP;AAGH;AACD;AACA;AACA;AACA;;;AACA,OAAO,MAAMS,yBAAyB,GAAG,CAACC,OAAD,EAAUnC,QAAV,EAAoBW,EAApB,KAA2B;AAChE,MAAI,CAACA,EAAL,EACI,OAF4D,CAGhE;;AACA,MAAID,WAAW,GAAG,EAAlB;;AACA,MAAI,OAAOyB,OAAO,CAACC,UAAf,KAA8B,QAAlC,EAA4C;AACxC1B,IAAAA,WAAW,CAAC2B,IAAZ,CAAiBF,OAAO,CAACC,UAAzB;AACH,GAFD,MAGK,IAAIE,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACC,UAAtB,CAAJ,EAAuC;AACxC1B,IAAAA,WAAW,GAAGA,WAAW,CAAC8B,MAAZ,CAAmBL,OAAO,CAACC,UAA3B,CAAd;AACH;;AACD,MAAI,OAAOD,OAAO,CAACzB,WAAf,KAA+B,QAAnC,EAA6C;AACzCyB,IAAAA,OAAO,CAACzB,WAAR,GAAsB,CAACyB,OAAO,CAACzB,WAAT,CAAtB;AACH;;AACD,MAAIyB,OAAO,CAACzB,WAAZ,EAAyB;AACrBA,IAAAA,WAAW,GAAGA,WAAW,CAAC8B,MAAZ,CAAmBL,OAAO,CAACzB,WAA3B,CAAd;AACH;;AACDD,EAAAA,iBAAiB,CAACC,WAAD,EAAcV,QAAd,EAAwBW,EAAxB,CAAjB,CAjBgE,CAkBhE;;AACA,MAAIZ,MAAM,GAAG,EAAb;;AACA,MAAI,OAAOoC,OAAO,CAACf,KAAf,KAAyB,QAA7B,EAAuC;AACnCrB,IAAAA,MAAM,CAACsC,IAAP,CAAYF,OAAO,CAACf,KAApB;AACH,GAFD,MAGK,IAAIkB,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACf,KAAtB,CAAJ,EAAkC;AACnCrB,IAAAA,MAAM,GAAGA,MAAM,CAACyC,MAAP,CAAcL,OAAO,CAACf,KAAtB,CAAT;AACH;;AACD,MAAI,OAAOe,OAAO,CAACpC,MAAf,KAA0B,QAA9B,EAAwC;AACpCA,IAAAA,MAAM,CAACsC,IAAP,CAAYF,OAAO,CAACpC,MAApB;AACH,GAFD,MAGK,IAAIuC,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACpC,MAAtB,CAAJ,EAAmC;AACpCA,IAAAA,MAAM,GAAGA,MAAM,CAACyC,MAAP,CAAcL,OAAO,CAACpC,MAAtB,CAAT;AACH;;AACDoB,EAAAA,YAAY,CAACpB,MAAD,EAASC,QAAT,EAAmBW,EAAnB,CAAZ,CAhCgE,CAiChE;AACA;;AACA,MAAI8B,QAAQ,GAAG,EAAf;;AACA,MAAI,OAAON,OAAO,CAACO,OAAf,KAA2B,QAA/B,EAAyC;AACrCD,IAAAA,QAAQ,CAACJ,IAAT,CAAcF,OAAO,CAACO,OAAtB;AACH,GAFD,MAGK,IAAIJ,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACO,OAAtB,CAAJ,EAAoC;AACrCD,IAAAA,QAAQ,GAAGA,QAAQ,CAACD,MAAT,CAAgBL,OAAO,CAACO,OAAxB,CAAX;AACH;;AACD,MAAI,OAAOP,OAAO,CAACM,QAAf,KAA4B,QAAhC,EAA0C;AACtCA,IAAAA,QAAQ,CAACJ,IAAT,CAAcF,OAAO,CAACM,QAAtB;AACH,GAFD,MAGK,IAAIH,KAAK,CAACC,OAAN,CAAcJ,OAAO,CAACM,QAAtB,CAAJ,EAAqC;AACtCA,IAAAA,QAAQ,GAAGA,QAAQ,CAACD,MAAT,CAAgBL,OAAO,CAACM,QAAxB,CAAX;AACH;;AACD,SAAOZ,mBAAmB,CAACY,QAAD,EAAWzC,QAAX,EAAqBW,EAArB,EAAyBwB,OAAO,CAACV,GAAjC,CAA1B;AACH,CAjDM;AAkDP,OAAO,SAASkB,UAAT,CAAoBC,gBAApB,EAAsC;AACzC;AACA;AACA;AACAb,EAAAA,OAAO,CAACc,QAAR,CAAiBC,SAAjB,CAA2B,OAA3B,EAAoC,MAAM;AACtC,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH,GAFD,EAJyC,CAOzC;;AACAhB,EAAAA,OAAO,CAACiB,EAAR,CAAW,iBAAX,EAA8B,MAAM;AAChCJ,IAAAA,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,EAApF;AACA9C,IAAAA,aAAa;AAChB,GAHD;AAIH","sourcesContent":["export const ROOT_ID = '__cy_root';\n/**\n * Remove any style or extra link elements from the iframe placeholder\n * left from any previous test\n *\n */\nexport function cleanupStyles() {\n    const styles = document.body.querySelectorAll('[data-cy=injected-style-tag]');\n    styles.forEach((styleElement) => {\n        if (styleElement.parentElement) {\n            styleElement.parentElement.removeChild(styleElement);\n        }\n    });\n    const links = document.body.querySelectorAll('[data-cy=injected-stylesheet]');\n    links.forEach((link) => {\n        if (link.parentElement) {\n            link.parentElement.removeChild(link);\n        }\n    });\n}\n/**\n * Insert links to external style resources.\n */\nfunction insertStylesheets(stylesheets, document, el) {\n    stylesheets.forEach((href) => {\n        const link = document.createElement('link');\n        link.type = 'text/css';\n        link.rel = 'stylesheet';\n        link.href = href;\n        link.dataset.cy = 'injected-stylesheet';\n        document.body.insertBefore(link, el);\n    });\n}\n/**\n * Inserts a single stylesheet element\n */\nfunction insertStyles(styles, document, el) {\n    styles.forEach((style) => {\n        const styleElement = document.createElement('style');\n        styleElement.dataset.cy = 'injected-style-tag';\n        styleElement.appendChild(document.createTextNode(style));\n        document.body.insertBefore(styleElement, el);\n    });\n}\nfunction insertSingleCssFile(cssFilename, document, el, log) {\n    return cy.readFile(cssFilename, { log }).then((css) => {\n        const style = document.createElement('style');\n        style.appendChild(document.createTextNode(css));\n        document.body.insertBefore(style, el);\n    });\n}\n/**\n * Reads the given CSS file from local file system\n * and adds the loaded style text as an element.\n */\nfunction insertLocalCssFiles(cssFilenames, document, el, log) {\n    return Cypress.Promise.mapSeries(cssFilenames, (cssFilename) => {\n        return insertSingleCssFile(cssFilename, document, el, log);\n    });\n}\n/**\n * Injects custom style text or CSS file or 3rd party style resources\n * into the given document.\n */\nexport const injectStylesBeforeElement = (options, document, el) => {\n    if (!el)\n        return;\n    // first insert all stylesheets as Link elements\n    let stylesheets = [];\n    if (typeof options.stylesheet === 'string') {\n        stylesheets.push(options.stylesheet);\n    }\n    else if (Array.isArray(options.stylesheet)) {\n        stylesheets = stylesheets.concat(options.stylesheet);\n    }\n    if (typeof options.stylesheets === 'string') {\n        options.stylesheets = [options.stylesheets];\n    }\n    if (options.stylesheets) {\n        stylesheets = stylesheets.concat(options.stylesheets);\n    }\n    insertStylesheets(stylesheets, document, el);\n    // insert any styles as <style>...</style> elements\n    let styles = [];\n    if (typeof options.style === 'string') {\n        styles.push(options.style);\n    }\n    else if (Array.isArray(options.style)) {\n        styles = styles.concat(options.style);\n    }\n    if (typeof options.styles === 'string') {\n        styles.push(options.styles);\n    }\n    else if (Array.isArray(options.styles)) {\n        styles = styles.concat(options.styles);\n    }\n    insertStyles(styles, document, el);\n    // now load any css files by path and add their content\n    // as <style>...</style> elements\n    let cssFiles = [];\n    if (typeof options.cssFile === 'string') {\n        cssFiles.push(options.cssFile);\n    }\n    else if (Array.isArray(options.cssFile)) {\n        cssFiles = cssFiles.concat(options.cssFile);\n    }\n    if (typeof options.cssFiles === 'string') {\n        cssFiles.push(options.cssFiles);\n    }\n    else if (Array.isArray(options.cssFiles)) {\n        cssFiles = cssFiles.concat(options.cssFiles);\n    }\n    return insertLocalCssFiles(cssFiles, document, el, options.log);\n};\nexport function setupHooks(optionalCallback) {\n    // When running component specs, we cannot allow \"cy.visit\"\n    // because it will wipe out our preparation work, and does not make much sense\n    // thus we overwrite \"cy.visit\" to throw an error\n    Cypress.Commands.overwrite('visit', () => {\n        throw new Error('cy.visit from a component spec is not allowed');\n    });\n    // @ts-ignore\n    Cypress.on('test:before:run', () => {\n        optionalCallback === null || optionalCallback === void 0 ? void 0 : optionalCallback();\n        cleanupStyles();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}